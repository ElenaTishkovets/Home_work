package home_work_3.calcs.additional;

import home_work_3.calcs.api.ICalculator;

/**
 * 12*. Создать CalculatorWithMemory используя аналогичные принципы построения класса CalculatorWithCounterAutoAgregationInterface.
 * 	12.1 Данный калькулятор предназначен для того чтобы расширить возможности калькулятора и обеспечить его дополнительной функцией памяти. В принципе работает как калькулятор из реальной жизни.
 * 	12.2 Все методы, объявленные в данном классе, НЕ статические (не имеют модификатор static).
 * 	12.3 В данном классе должен быть только конструктор принимающий объект типа ICalculator
 * 	12.4 Данный класс напрямую не умеет считать математику, он умеет делегировать расчёт математики калькулятору который передали в конструктор
 * 	12.5 В классе должны присутствовать математические методы:
 * 		12.5.1 4 базовых математических метода (деление, умножение, вычитание, сложение).
 * 		12.5.2 3 метода (Возведение в целую степень дробного положительного числа, Модуль числа, Корень из числа).
 * 	12.6 Функция памяти работает через методы:
 * 		12.6.1 Записать в память результат выполнения последнего вызванного метода. У данного метода не должно быть параметров. Данный метод вызывается непосредтвенно пользователем, а не автоматический. Пример void save();
 * 		12.6.2 Получить из памяти записанное значение. При получении записи из памяти память стирается, при записи нового значения память перезаписывается. Данный метод вызывается непосредтвенно пользователем, а не автоматический. Пример double load();
 * 	12.7 В этом калькуляторе НЕТ ФУНКЦИИ ПОДСЧЁТА количества использований
 */

public class CalculatorWithMemory {

    private ICalculator iCalculator; // поле, хранящее объект класса интерфейс
    private double memory; // поле для сохранения результата калькулятора
    private double lastResult;// поле для сохранения результата калькулятора

    /**
     * Конструктор для инициализации поля путем передачи объекта на вход конструктора
     */
    public CalculatorWithMemory(ICalculator iCalculator) {
        this.iCalculator = iCalculator;
    }

    /**
     * Записывает в память результат выполнения последнего вызванного метода
     */
    public void save() {
        memory = lastResult;
    }

    /**
     * Получает из памяти записанное значение
     * @return Значение, сохраненное в памяти.
     */
    public double load() {
        double value = memory;
        memory = 0; //
        return value;
    }
    /**
     * складывает два числа с плавающей точкой, увеличивает счетчик использования калькулятора
     * @param a признак первое дробное число
     * @param b признак второе дробное число
     * @return результат сложения двух чисел а и b
     */
    public double add (double a, double b) {
        return lastResult = iCalculator.add(a, b);
    }

    /**
     * находит разницу между двумя числами с плавающей точкой
     * @param a признак первое дробное число
     * @param b признак второе дробное число
     * @return результат вычитания чисел b из числа a
     */
    public double subtract(double a, double b) {
        return lastResult = iCalculator.subtract(a, b);
    }

    /**
     * умножает два числа с плавающей точкой
     * @param a признак первое дробное число
     * @param b признак второе дробное число
     * @return результат умножения двух чисел а и b
     */
    public double multiply(double a, double b) {
        return lastResult = iCalculator.multiply(a, b);
    }

    /**
     * делит одно число с плавающей точкой на другое
     * @param a признак первое дробное число
     * @param b признак второе дробное число
     * @return результат деления числа а на число b
     */
    public double divide(double a, double b) {
        return lastResult = iCalculator.divide(a, b);
    }

    /**
     * Метод возведения в степень числа с плавающей точкой
     * @param base     признак число с плавающей точкой
     * @param exponent признак степень
     * @return результат возведения числа с плавающей точкой встепень
     */
    public double power(double base, int exponent) {
        return lastResult = iCalculator.power(base, exponent);
    }

    /**
     * Определяет модуль числа с плавающей точкой
     * @param number признак число с плавающей точкой
     * @return модуль числа с плавающей точкой
     */
    public double absolute(double number) {
        return lastResult = iCalculator.absolute(number);
    }

    /**
     * извлекает квадратный корень из числа с плавающей точкой
     * @param number признак число с плавающей точкой
     * @return квадратный корень из числа с плавающей точкой
     */
    public double squareRoot(double number) {
        return lastResult = iCalculator.squareRoot(number);
    }
}